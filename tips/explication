-------------------------------------------------------------------- SOME USEFUL INFORMATION ABOUT THE CODE AND THE HEAP STRUCTURE --------------------------------------------------------------------


-------------------------------------------------------------------- ENGLISH VERSION

Dijkstra's algorithm finds the shortest path between two points: A and B. 

It picks the unvisited node with the lowest distance, 
calculates the distance through it to each unvisited neighbor, 
and finally updates the neighbor's distance if smaller.

STEPS:
 1) Mark all nodes unvisited. 
 
 2) Create a set of all the unvisited nodes called the unvisited set, 
 in our case we are going to use a set for visited nodes, 
 not for unvisited nodes.

 3) Assign to every node a tentative distance value: 
 set it to zero for our initial node. 
 Set the initial node as current.

 4) For the current node, consider all of its unvisited neighbors and calculate their tentative distances through the current node. 
 
 5) Compare the newly calculated tentative distance to the current assigned value and assign the smaller one.
 Otherwise, keep the current value.

 6) When we are done considering all of the unvisited neighbors of the current node, 
 mark the current node as visited. 
 A visited node will never be checked again.

 7) Select next unvisited node that is marked with the smallest tentative distance, 
 set it as the new "current node", 
 and go back to step 3.
 
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

=> Dijkstra's Algorithm, can be OPTIMIZED by using a priority queue.
What's a Heap?
An almost complete tree that satisfies the heap property: 
in a max heap, for any given node C, if P is a parent node of C, then the key (the value) of P is greater than or equal to the key of C. 
In a min heap, the key of P is less than or equal to the key of C The node at the "top" of the heap (with no parents) is called the root node.

A heap can be thought of as a priority queue; 
the most important node will always be at the top, and when removed, its replacement will be the most important. 
This can be useful when coding algorithms that require certain things to processed in a complete order, 
but when you don't want to perform a full sort or need to know anything about the rest of the nodes. 

########################################################################################################################################################################################################

-------------------------------------------------------------------- FRENCH VERSION

Dijkstra est un algorithme qui cherche le plus court chemin entre A et B. 
Il sélectionne le noeud non visité ayant la plus faible distance,
calcule la distance en passant par ce noeud jusqu'à chaque noeud voisin non visité.
Si la distance trouvée est plus petite que la distance du voisin, 
il met à jour cette dernière.



 1) Marquer tous les nœuds comme étant non visités. 
 
 2) Créer un ensemble de tous les nœuds visités.
 
 3) Attribuez à chaque nœud une valeur de distance provisoire : 
 définissez-la comme étant égale à zéro pour notre nœud initial. 
 Définissez le nœud initial comme étant le noeud courant.
 
 4) Pour le nœud actuel:
 Considérez tous ses voisins non visités et calculer leurs distances provisoires à travers le nœud actuel. 
 
 5) Comparez la distance provisoire nouvellement calculée à la valeur attribuée actuelle et attribuez la plus petite. 
 Sinon, conservez la valeur actuelle.
 
 6) Lorsque nous avons fini de considérer tous les voisins non visités du nœud actuel: 
 marquer le nœud actuel comme visité. Un nœud visité ne sera plus jamais vérifié.
 
 7) Sélectionner le prochain nœud non visité qui est marqué avec la plus petite distance provisoire, 
 définisser-le comme le nouveau "nœud actuel" => retour à l'étape "Pour le noeud actuel".


°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
=> L'algorithme de Dijkstra, peut être optimisé en utilisant une file d'attente prioritaire => en utilisant heap.

Heap: 
Un arbre presque complet qui satisfait la propriété des heaps : 
dans un max heap, pour tout nœud C donné, si P est un nœud parent de C, alors la clé (la valeur) de P est supérieure ou égale à la clé de C. 
Dans un min heap, la clé de P est inférieure ou égale à la clé de C Le nœud au « sommet » du heap (sans parents) est appelé le nœud racine.


Un heap peut être considéré comme une file d'attente prioritaire ; 
le nœud le plus important sera toujours au sommet, et une fois supprimé, son remplacement sera le plus important. 
Cela peut être utile lors du codage d'algorithmes qui nécessitent le traitement de certaines choses dans un ordre complet, 
mais lorsque vous ne souhaitez pas effectuer un tri complet ou que vous avez besoin de savoir quoi que ce soit sur le reste des nœuds. 
